#+TITLE: Getting data from the web with python
#+AUTHOR: Jan Boone

In this notebook we show how you can get publicly available data directly "into python". 

We will use [[https://pandas-datareader.readthedocs.io/en/latest/remote_data.html][pandas datareader]] to get data from a number of sources. Look at the documentation to see which sources are available and how to retrieve them from the web. In fact, there is also a [[https://www.datacamp.com/courses/importing-managing-financial-data-in-python][datacamp course]] on this. Here I give a brief overview of the possibilities.

First, you need to install this datareader. The instructions can be found [[https://pandas-datareader.readthedocs.io/en/latest/index.html][here]]. If you use the anaconda python distribution, you can type in a shell/terminal/command prompt: `conda install pandas-datareader`. 


* Financial data

#+BEGIN_SRC ipython
import pandas as pd
import matplotlib.pyplot as plt
from pandas_datareader.data import DataReader
from datetime import date # Date & time functionality
start = date(2015, 1, 1) # Default: Jan 1, 2010
end = date(2016, 12, 31) # Default: today
ticker = 'GOOG'
data_source = 'google'
stock_data = DataReader(ticker, data_source, start, end)
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

#+BEGIN_SRC ipython
plt.style.use('seaborn')
%matplotlib inline
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

#+BEGIN_SRC ipython
stock_data['Close'].plot(title='Google')
plt.plot()
#+END_SRC

#+RESULTS:
:RESULTS:

[]
[[file:ipython-inline-images/ob-ipython-03aa2db0d6b30508626a6bda04f66744.png]]
<matplotlib.figure.Figure at 0x105164b00>
:END:

Now suppose that you are really happy with your data and you want to save it as a csv-file. Google 'pandas write to csv' to find a way to do this.

#+BEGIN_SRC ipython
stock_data.to_csv('google_data.csv')
#+END_SRC

#+RESULTS:
:RESULTS:

:END:


** Getting data on a number of companies

Using the [[https://stackoverflow.com/questions/28174193/add-new-column-based-on-a-list-and-sort-date-by-newest/28210920#28210920][link here]]

#+BEGIN_SRC ipython
start
#+END_SRC

#+RESULTS:
:RESULTS:

datetime.date(2015, 1, 1)
:END:

#+BEGIN_SRC ipython
r = DataReader('YHOO', 'yahoo', start)
r.head()
#+END_SRC

#+RESULTS:
:RESULTS:

                  Open        High         Low       Close   Adj Close  \
Date                                                                     
2015-01-02  222.869995  223.250000  213.259995  219.309998  219.309998   
2015-01-05  214.550003  216.500000  207.160004  210.089996  210.089996   
2015-01-06  210.059998  214.199997  204.210007  211.279999  211.279999   
2015-01-07  213.350006  214.779999  209.779999  210.949997  210.949997   
2015-01-08  212.809998  213.800003  210.009995  210.619995  210.619995   

             Volume  
Date                 
2015-01-02  4764400  
2015-01-05  5368500  
2015-01-06  6261900  
2015-01-07  2968400  
2015-01-08  3442500  
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Open</th>
      <th>High</th>
      <th>Low</th>
      <th>Close</th>
      <th>Adj Close</th>
      <th>Volume</th>
    </tr>
    <tr>
      <th>Date</th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2015-01-02</th>
      <td>222.869995</td>
      <td>223.250000</td>
      <td>213.259995</td>
      <td>219.309998</td>
      <td>219.309998</td>
      <td>4764400</td>
    </tr>
    <tr>
      <th>2015-01-05</th>
      <td>214.550003</td>
      <td>216.500000</td>
      <td>207.160004</td>
      <td>210.089996</td>
      <td>210.089996</td>
      <td>5368500</td>
    </tr>
    <tr>
      <th>2015-01-06</th>
      <td>210.059998</td>
      <td>214.199997</td>
      <td>204.210007</td>
      <td>211.279999</td>
      <td>211.279999</td>
      <td>6261900</td>
    </tr>
    <tr>
      <th>2015-01-07</th>
      <td>213.350006</td>
      <td>214.779999</td>
      <td>209.779999</td>
      <td>210.949997</td>
      <td>210.949997</td>
      <td>2968400</td>
    </tr>
    <tr>
      <th>2015-01-08</th>
      <td>212.809998</td>
      <td>213.800003</td>
      <td>210.009995</td>
      <td>210.619995</td>
      <td>210.619995</td>
      <td>3442500</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

#+BEGIN_SRC ipython
#from pandas import DataFrame
symbols_list = ['AAPL', 'TSLA', 'GOOG']

symbols=[]
for ticker in symbols_list: 
    r = DataReader(ticker, 'yahoo', start)
    # add a symbol column
    r['Symbol'] = ticker 
    symbols.append(r)
# concatenate all the dfs
df = pd.concat(symbols)
#define cell with the columns that i need
cell= df[['Symbol','Open','High','Low','Adj Close','Volume']]
#changing sort of Symbol (ascending) and Date(descending) setting Symbol as first column and changing date format
cell.reset_index().sort(['Symbol', 'Date'], ascending=[1,0]).set_index('Symbol').to_csv('stock.csv', date_format='%d/%m/%Y')
#+END_SRC

#+RESULTS:
:RESULTS:

:END:



* Economic series

Here we look at GDP, interest rates etc.


#+BEGIN_SRC ipython
series_code = 'DGS10' # 10-year Treasury Rate
data_source = 'fred' # FED Economic Data Service
data = DataReader(series_code, data_source, start,end)
#+END_SRC

#+RESULTS:
:RESULTS:

:END:

#+BEGIN_SRC ipython
series_name = '10-year Treasury'
data = data.rename(columns={series_code: series_name})
data.plot(title=series_name)
plt.show()
#+END_SRC

#+RESULTS:
:RESULTS:

[[file:ipython-inline-images/ob-ipython-d6e41b4ddeadaacf55f269a03feb0914.png]]
<matplotlib.figure.Figure at 0x10f764780>
:END:

Suppose we are interested in GDP. Go to the [[https://fred.stlouisfed.org/][website]] and type GDP on the top right of the page "Search FRED". Then select the GDP series that you want. We clicked on [[https://fred.stlouisfed.org/series/A191RL1Q225SBEA][this one]]. The title reads "Real Gross Domestic Product (A191RL1Q225SBEA)"; the expression in brackets is the name we need for python to retrieve this data. If we do not set an end-date in `DataReader`, it goes up to the last observation.

#+BEGIN_SRC ipython
series_code = 'A191RL1Q225SBEA' 
data_source = 'fred'
gdp_data = DataReader(series_code, data_source, date(1947,4,1))
gdp_data.head()
#+END_SRC

#+RESULTS:
:RESULTS:

            A191RL1Q225SBEA
DATE                       
1947-04-01             -0.4
1947-07-01             -0.4
1947-10-01              6.4
1948-01-01              6.0
1948-04-01              6.7
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>A191RL1Q225SBEA</th>
    </tr>
    <tr>
      <th>DATE</th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1947-04-01</th>
      <td>-0.4</td>
    </tr>
    <tr>
      <th>1947-07-01</th>
      <td>-0.4</td>
    </tr>
    <tr>
      <th>1947-10-01</th>
      <td>6.4</td>
    </tr>
    <tr>
      <th>1948-01-01</th>
      <td>6.0</td>
    </tr>
    <tr>
      <th>1948-04-01</th>
      <td>6.7</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:


#+BEGIN_SRC ipython
combined_data = pd.concat([stock_data['Close'], data], axis=1)
combined_data.head()
#+END_SRC

#+RESULTS:
:RESULTS:

             Close  10-year Treasury
2015-01-01     NaN               NaN
2015-01-02  524.81              2.12
2015-01-05  513.87              2.04
2015-01-06  501.96              1.97
2015-01-07  501.10              1.96
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>Close</th>
      <th>10-year Treasury</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>2015-01-01</th>
      <td>NaN</td>
      <td>NaN</td>
    </tr>
    <tr>
      <th>2015-01-02</th>
      <td>524.81</td>
      <td>2.12</td>
    </tr>
    <tr>
      <th>2015-01-05</th>
      <td>513.87</td>
      <td>2.04</td>
    </tr>
    <tr>
      <th>2015-01-06</th>
      <td>501.96</td>
      <td>1.97</td>
    </tr>
    <tr>
      <th>2015-01-07</th>
      <td>501.10</td>
      <td>1.96</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:


#+BEGIN_SRC ipython
combined_data.plot(secondary_y='10-year Treasury', title='Google share price and 10 year interest rate')
plt.show()
#+END_SRC

#+RESULTS:
:RESULTS:

[[file:ipython-inline-images/ob-ipython-8d2dd44d9fb2d4ea651f1e8571c76040.png]]
<matplotlib.figure.Figure at 0x10f6c6cf8>
:END:

Data from the worldbank.







* Labour market data


#+BEGIN_SRC ipython

#+END_SRC




* Health care expenditures per municipality

We start with health care data on the level of municipalities. We will plot how health care expenditure varies with location.

Some institutional background:
+ in the Netherlands health insurance is mandatory
+ people aged 18 or older face a deductible of 365 euros in 2014; no deductible for people below 18
+ the deductible applies to a number of cost categories in the "basic packages"; see below
+ people can --voluntarily-- increase their deductible with 100, 200, 300, 400 or 500 euro; but our data has no information on this


** loading the data

The following code block loads the data. We use data from [[http://www.vektis.nl/index.php/vektis-open-data][Vektis]]. We import the data, which is a 'csv' file with ";" as separator between columns. We also import the pandas library.

Then we inspect the first ten rows of our data set.

#+NAME: kitten-purple-cardinal-quebec
#+BEGIN_SRC ipython :session :results output drawer

# First lets clear all previous python imports and variables by resetting the python kernel.
%reset -f


import pandas as pd

df_gemeente = pd.read_csv('Vektis_Open_Databestand_Zorgverzekeringswet_2014_-_gemeente.csv', sep = ';')

df_gemeente.head(10)
#+END_SRC

#+RESULTS: kitten-purple-cardinal-quebec
:RESULTS:
GESLACHT LEEFTIJDSKLASSE   GEMEENTENAAM  AANTAL_BSN  AANTAL_VERZEKERDEJAREN  \
0      NaN             NaN            NaN      298383               185664.92   
1        M   0 t/m  4 jaar    AA EN HUNZE         507                  468.83   
2        M   0 t/m  4 jaar        AALBURG         428                  387.28   
3        M   0 t/m  4 jaar       AALSMEER         876                  790.65   
4        M   0 t/m  4 jaar         AALTEN         667                  600.00   
5        M   0 t/m  4 jaar  ACHTKARSPELEN         810                  737.03   
6        M   0 t/m  4 jaar   ALBLASSERDAM         637                  561.21   
7        M   0 t/m  4 jaar  ALBRANDSWAARD         735                  663.22   
8        M   0 t/m  4 jaar        ALKMAAR        2967                 2660.93   
9        M   0 t/m  4 jaar         ALMELO        1906                 1714.63   

   KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG  KOSTEN_FARMACIE  \
0                          48661669.94       9219422.33   
1                            473370.77         43305.49   
2                            340442.37         23395.86   
3                            932841.57         54597.52   
4                            515879.78         43516.71   
5                            766456.80         88084.16   
6                           1252440.29        140225.60   
7                            927635.48        114174.07   
8                           4005510.06        258936.51   
9                           3518922.31        254976.19   

   KOSTEN_TWEEDELIJNS_GGZ  KOSTEN_HUISARTS_INSCHRIJFTARIEF  \
0              7475481.90                       4092492.35   
1                14056.81                         26239.56   
2                 5555.83                         21673.15   
3                34355.66                         43971.27   
4                 2404.19                         33749.10   
5                 6681.81                         41477.79   
6                 9715.96                         30705.39   
7                 2043.52                         37028.38   
8                22599.87                        147227.49   
9                87437.11                         96757.71   

   KOSTEN_HUISARTS_CONSULT      ...        KOSTEN_PARAMEDISCHE_ZORG_OVERIG  \
0               1388439.07      ...                              290539.66   
1                 12829.29      ...                               13783.67   
2                  9417.98      ...                               15297.60   
3                 22413.37      ...                               14105.95   
4                 18472.64      ...                               31816.27   
5                 19157.34      ...                               30454.49   
6                 15936.39      ...                               19202.75   
7                 21611.09      ...                               30449.94   
8                 71141.10      ...                               67205.26   
9                 51693.62      ...                               81595.14   

   KOSTEN_ZIEKENVERVOER_ZITTEND  KOSTEN_ZIEKENVERVOER_LIGGEND  \
0                     210313.33                    1398151.05   
1                        638.08                       5004.86   
2                        315.06                       6155.09   
3                          0.00                      20465.44   
4                       1173.82                       6282.28   
5                        204.30                      17011.84   
6                          0.00                      11421.05   
7                          0.00                      13027.62   
8                       4086.51                      70806.48   
9                       7742.31                      32328.75   

   KOSTEN_KRAAMZORG  KOSTEN_VERLOSKUNDIGE_ZORG  \
0         1286545.5                 1072906.37   
1               0.0                       0.00   
2               0.0                       0.00   
3               0.0                       0.00   
4               0.0                       0.00   
5               0.0                       0.00   
6               0.0                       0.00   
7               0.0                       0.00   
8               0.0                       0.00   
9               0.0                       0.00   

   KOSTEN_GENERALISTISCHE_BASIS_GGZ  KOSTEN_GRENSOVERSCHRIJDENDE_ZORG  \
0                         490222.49                       21946526.34   
1                              0.00                           2571.36   
2                              0.00                            186.08   
3                            157.44                           1743.72   
4                           1422.67                             62.75   
5                              0.00                            206.11   
6                              0.00                            662.75   
7                              0.00                           1422.76   
8                            168.55                           7153.37   
9                           3777.82                           2492.23   

   KOSTEN_EERSTELIJNS_ONDERSTEUNING  KOSTEN_GERIATRISCHE_REVALIDATIEZORG  \
0                            523.35                            351533.29   
1                             31.05                                 0.00   
2                              5.40                                 0.00   
3                             12.60                                 0.00   
4                              3.60                                 0.00   
5                            955.80                                 0.00   
6                             11.25                                 0.00   
7                              7.20                                 0.00   
8                             36.90                                 0.00   
9                             27.45                                 0.00   

   KOSTEN_OVERIG  
0      849751.44  
1         186.03  
2         135.30  
3       13285.23  
4         107.40  
5         453.66  
6         165.60  
7         368.37  
8        2707.21  
9         682.51  

[10 rows x 24 columns]
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>GESLACHT</th>
      <th>LEEFTIJDSKLASSE</th>
      <th>GEMEENTENAAM</th>
      <th>AANTAL_BSN</th>
      <th>AANTAL_VERZEKERDEJAREN</th>
      <th>KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG</th>
      <th>KOSTEN_FARMACIE</th>
      <th>KOSTEN_TWEEDELIJNS_GGZ</th>
      <th>KOSTEN_HUISARTS_INSCHRIJFTARIEF</th>
      <th>KOSTEN_HUISARTS_CONSULT</th>
      <th>...</th>
      <th>KOSTEN_PARAMEDISCHE_ZORG_OVERIG</th>
      <th>KOSTEN_ZIEKENVERVOER_ZITTEND</th>
      <th>KOSTEN_ZIEKENVERVOER_LIGGEND</th>
      <th>KOSTEN_KRAAMZORG</th>
      <th>KOSTEN_VERLOSKUNDIGE_ZORG</th>
      <th>KOSTEN_GENERALISTISCHE_BASIS_GGZ</th>
      <th>KOSTEN_GRENSOVERSCHRIJDENDE_ZORG</th>
      <th>KOSTEN_EERSTELIJNS_ONDERSTEUNING</th>
      <th>KOSTEN_GERIATRISCHE_REVALIDATIEZORG</th>
      <th>KOSTEN_OVERIG</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>298383</td>
      <td>185664.92</td>
      <td>48661669.94</td>
      <td>9219422.33</td>
      <td>7475481.90</td>
      <td>4092492.35</td>
      <td>1388439.07</td>
      <td>...</td>
      <td>290539.66</td>
      <td>210313.33</td>
      <td>1398151.05</td>
      <td>1286545.5</td>
      <td>1072906.37</td>
      <td>490222.49</td>
      <td>21946526.34</td>
      <td>523.35</td>
      <td>351533.29</td>
      <td>849751.44</td>
    </tr>
    <tr>
      <th>1</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AA EN HUNZE</td>
      <td>507</td>
      <td>468.83</td>
      <td>473370.77</td>
      <td>43305.49</td>
      <td>14056.81</td>
      <td>26239.56</td>
      <td>12829.29</td>
      <td>...</td>
      <td>13783.67</td>
      <td>638.08</td>
      <td>5004.86</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>2571.36</td>
      <td>31.05</td>
      <td>0.00</td>
      <td>186.03</td>
    </tr>
    <tr>
      <th>2</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALBURG</td>
      <td>428</td>
      <td>387.28</td>
      <td>340442.37</td>
      <td>23395.86</td>
      <td>5555.83</td>
      <td>21673.15</td>
      <td>9417.98</td>
      <td>...</td>
      <td>15297.60</td>
      <td>315.06</td>
      <td>6155.09</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>186.08</td>
      <td>5.40</td>
      <td>0.00</td>
      <td>135.30</td>
    </tr>
    <tr>
      <th>3</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALSMEER</td>
      <td>876</td>
      <td>790.65</td>
      <td>932841.57</td>
      <td>54597.52</td>
      <td>34355.66</td>
      <td>43971.27</td>
      <td>22413.37</td>
      <td>...</td>
      <td>14105.95</td>
      <td>0.00</td>
      <td>20465.44</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>157.44</td>
      <td>1743.72</td>
      <td>12.60</td>
      <td>0.00</td>
      <td>13285.23</td>
    </tr>
    <tr>
      <th>4</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALTEN</td>
      <td>667</td>
      <td>600.00</td>
      <td>515879.78</td>
      <td>43516.71</td>
      <td>2404.19</td>
      <td>33749.10</td>
      <td>18472.64</td>
      <td>...</td>
      <td>31816.27</td>
      <td>1173.82</td>
      <td>6282.28</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>1422.67</td>
      <td>62.75</td>
      <td>3.60</td>
      <td>0.00</td>
      <td>107.40</td>
    </tr>
    <tr>
      <th>5</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ACHTKARSPELEN</td>
      <td>810</td>
      <td>737.03</td>
      <td>766456.80</td>
      <td>88084.16</td>
      <td>6681.81</td>
      <td>41477.79</td>
      <td>19157.34</td>
      <td>...</td>
      <td>30454.49</td>
      <td>204.30</td>
      <td>17011.84</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>206.11</td>
      <td>955.80</td>
      <td>0.00</td>
      <td>453.66</td>
    </tr>
    <tr>
      <th>6</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ALBLASSERDAM</td>
      <td>637</td>
      <td>561.21</td>
      <td>1252440.29</td>
      <td>140225.60</td>
      <td>9715.96</td>
      <td>30705.39</td>
      <td>15936.39</td>
      <td>...</td>
      <td>19202.75</td>
      <td>0.00</td>
      <td>11421.05</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>662.75</td>
      <td>11.25</td>
      <td>0.00</td>
      <td>165.60</td>
    </tr>
    <tr>
      <th>7</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ALBRANDSWAARD</td>
      <td>735</td>
      <td>663.22</td>
      <td>927635.48</td>
      <td>114174.07</td>
      <td>2043.52</td>
      <td>37028.38</td>
      <td>21611.09</td>
      <td>...</td>
      <td>30449.94</td>
      <td>0.00</td>
      <td>13027.62</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>0.00</td>
      <td>1422.76</td>
      <td>7.20</td>
      <td>0.00</td>
      <td>368.37</td>
    </tr>
    <tr>
      <th>8</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ALKMAAR</td>
      <td>2967</td>
      <td>2660.93</td>
      <td>4005510.06</td>
      <td>258936.51</td>
      <td>22599.87</td>
      <td>147227.49</td>
      <td>71141.10</td>
      <td>...</td>
      <td>67205.26</td>
      <td>4086.51</td>
      <td>70806.48</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>168.55</td>
      <td>7153.37</td>
      <td>36.90</td>
      <td>0.00</td>
      <td>2707.21</td>
    </tr>
    <tr>
      <th>9</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ALMELO</td>
      <td>1906</td>
      <td>1714.63</td>
      <td>3518922.31</td>
      <td>254976.19</td>
      <td>87437.11</td>
      <td>96757.71</td>
      <td>51693.62</td>
      <td>...</td>
      <td>81595.14</td>
      <td>7742.31</td>
      <td>32328.75</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>3777.82</td>
      <td>2492.23</td>
      <td>27.45</td>
      <td>0.00</td>
      <td>682.51</td>
    </tr>
  </tbody>
</table>
<p>10 rows × 24 columns</p>
</div>
#+END_EXPORT
:END:

We are going to be interested in total health care costs under the deductible. Hence, we specify the categories that fall under the deductible in the Netherlands in 2014.
Further, we want to do this analysis in English. So we relabel the relevant column names into English.

We specify a list of columns (cost categories) across which we want to add costs. As the costs are total costs (not costs per head) we can indeed add these numbers. We leave out mental health care as it features its own financial incentives.

We specify the name of a new variable ~health_expenditure_under_deductible~ which is calculated on the list of columns specified and then the function that needs to be applied -- ~sum~ in this case. Finally, we specify that the function needs to be applied row-wise: ~axis=1~.

Then we give a dictionary with "old" variable names (in Dutch) and the "new" names in English for the variables where we want to use the English names.

#+NAME: charlie-jig-red-texas
#+BEGIN_SRC ipython :session :results output drawer
cost_categories_under_deductible = ['KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG', 'KOSTEN_MONDZORG', 'KOSTEN_FARMACIE', 'KOSTEN_HULPMIDDELEN', 'KOSTEN_PARAMEDISCHE_ZORG_FYSIOTHERAPIE', 'KOSTEN_PARAMEDISCHE_ZORG_OVERIG', 'KOSTEN_ZIEKENVERVOER_ZITTEND', 'KOSTEN_ZIEKENVERVOER_LIGGEND', 'KOSTEN_GRENSOVERSCHRIJDENDE_ZORG', 'KOSTEN_GERIATRISCHE_REVALIDATIEZORG', 'KOSTEN_OVERIG']
df_gemeente['health_expenditure_under_deductible'] = df_gemeente[cost_categories_under_deductible].sum(axis=1)

df_gemeente = df_gemeente.rename_axis({
'GESLACHT':'sex',
'LEEFTIJDSKLASSE':'age',
'GEMEENTENAAM':'MUNICIPALITY',
'AANTAL_BSN':'number_citizens',
'KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG':'hospital_care',
'KOSTEN_FARMACIE':'pharmaceuticals',
'KOSTEN_TWEEDELIJNS_GGZ':'mental_care',
'KOSTEN_HUISARTS_INSCHRIJFTARIEF':'GP_capitation',
'KOSTEN_HUISARTS_CONSULT':'GP_fee_for_service',
'KOSTEN_HUISARTS_OVERIG':'GP_other',
'KOSTEN_MONDZORG':'dental care',
'KOSTEN_PARAMEDISCHE_ZORG_FYSIOTHERAPIE':'physiotherapy',
'KOSTEN_KRAAMZORG':'maternity_care',
'KOSTEN_VERLOSKUNDIGE_ZORG':'obstetrics'
}, axis='columns')

df_gemeente.dtypes
#+END_SRC

#+RESULTS: charlie-jig-red-texas
:RESULTS:
sex                                     object
age                                     object
MUNICIPALITY                            object
number_citizens                          int64
AANTAL_VERZEKERDEJAREN                 float64
hospital_care                          float64
pharmaceuticals                        float64
mental_care                            float64
GP_capitation                          float64
GP_fee_for_service                     float64
GP_other                               float64
KOSTEN_HULPMIDDELEN                    float64
dental care                            float64
physiotherapy                          float64
KOSTEN_PARAMEDISCHE_ZORG_OVERIG        float64
KOSTEN_ZIEKENVERVOER_ZITTEND           float64
KOSTEN_ZIEKENVERVOER_LIGGEND           float64
maternity_care                         float64
obstetrics                             float64
KOSTEN_GENERALISTISCHE_BASIS_GGZ       float64
KOSTEN_GRENSOVERSCHRIJDENDE_ZORG       float64
KOSTEN_EERSTELIJNS_ONDERSTEUNING       float64
KOSTEN_GERIATRISCHE_REVALIDATIEZORG    float64
KOSTEN_OVERIG                          float64
health_expenditure_under_deductible    float64
dtype: object
:END:

We drop the columns that we no longer need.

#+NAME: kitten-quebec-hawaii-william
#+BEGIN_SRC ipython :session :results output drawer
df_gemeente.drop(['AANTAL_VERZEKERDEJAREN',
'KOSTEN_HULPMIDDELEN',
'KOSTEN_PARAMEDISCHE_ZORG_OVERIG',
'KOSTEN_ZIEKENVERVOER_ZITTEND',
'KOSTEN_ZIEKENVERVOER_LIGGEND',
'KOSTEN_GRENSOVERSCHRIJDENDE_ZORG',
'KOSTEN_GERIATRISCHE_REVALIDATIEZORG',
'KOSTEN_OVERIG',
'KOSTEN_GENERALISTISCHE_BASIS_GGZ',
'KOSTEN_EERSTELIJNS_ONDERSTEUNING'],inplace=True,axis=1)
df_gemeente.columns
#+END_SRC

#+RESULTS: kitten-quebec-hawaii-william
:RESULTS:
Index(['sex', 'age', 'MUNICIPALITY', 'number_citizens', 'hospital_care',
       'pharmaceuticals', 'mental_care', 'GP_capitation', 'GP_fee_for_service',
       'GP_other', 'dental care', 'physiotherapy', 'maternity_care',
       'obstetrics', 'health_expenditure_under_deductible'],
      dtype='object')
:END:

Let's look again at the first couple of lines of our data set. The ~head~ method presents the first 5 line as default.

#+NAME: three-quebec-video-yankee
#+BEGIN_SRC ipython :session :results output drawer
df_gemeente.head()
#+END_SRC

#+RESULTS: three-quebec-video-yankee
:RESULTS:
sex             age MUNICIPALITY  number_citizens  hospital_care  \
0  NaN             NaN          NaN           298383    48661669.94   
1    M   0 t/m  4 jaar  AA EN HUNZE              507      473370.77   
2    M   0 t/m  4 jaar      AALBURG              428      340442.37   
3    M   0 t/m  4 jaar     AALSMEER              876      932841.57   
4    M   0 t/m  4 jaar       AALTEN              667      515879.78   

   pharmaceuticals  mental_care  GP_capitation  GP_fee_for_service  \
0       9219422.33   7475481.90     4092492.35          1388439.07   
1         43305.49     14056.81       26239.56            12829.29   
2         23395.86      5555.83       21673.15             9417.98   
3         54597.52     34355.66       43971.27            22413.37   
4         43516.71      2404.19       33749.10            18472.64   

     GP_other  dental care  physiotherapy  maternity_care  obstetrics  \
0  3041904.41   1249229.61      418648.30       1286545.5  1072906.37   
1    36034.65      9311.14       15968.80             0.0        0.00   
2    20159.19      7213.81        6135.05             0.0        0.00   
3    61629.32     19042.00       20086.43             0.0        0.00   
4    46720.61     12909.41       20762.75             0.0        0.00   

   health_expenditure_under_deductible  
0                          86677435.03  
1                            576750.31  
2                            406856.55  
3                           1093297.37  
4                            652523.86  
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sex</th>
      <th>age</th>
      <th>MUNICIPALITY</th>
      <th>number_citizens</th>
      <th>hospital_care</th>
      <th>pharmaceuticals</th>
      <th>mental_care</th>
      <th>GP_capitation</th>
      <th>GP_fee_for_service</th>
      <th>GP_other</th>
      <th>dental care</th>
      <th>physiotherapy</th>
      <th>maternity_care</th>
      <th>obstetrics</th>
      <th>health_expenditure_under_deductible</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>NaN</td>
      <td>NaN</td>
      <td>NaN</td>
      <td>298383</td>
      <td>48661669.94</td>
      <td>9219422.33</td>
      <td>7475481.90</td>
      <td>4092492.35</td>
      <td>1388439.07</td>
      <td>3041904.41</td>
      <td>1249229.61</td>
      <td>418648.30</td>
      <td>1286545.5</td>
      <td>1072906.37</td>
      <td>86677435.03</td>
    </tr>
    <tr>
      <th>1</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AA EN HUNZE</td>
      <td>507</td>
      <td>473370.77</td>
      <td>43305.49</td>
      <td>14056.81</td>
      <td>26239.56</td>
      <td>12829.29</td>
      <td>36034.65</td>
      <td>9311.14</td>
      <td>15968.80</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>576750.31</td>
    </tr>
    <tr>
      <th>2</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALBURG</td>
      <td>428</td>
      <td>340442.37</td>
      <td>23395.86</td>
      <td>5555.83</td>
      <td>21673.15</td>
      <td>9417.98</td>
      <td>20159.19</td>
      <td>7213.81</td>
      <td>6135.05</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>406856.55</td>
    </tr>
    <tr>
      <th>3</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALSMEER</td>
      <td>876</td>
      <td>932841.57</td>
      <td>54597.52</td>
      <td>34355.66</td>
      <td>43971.27</td>
      <td>22413.37</td>
      <td>61629.32</td>
      <td>19042.00</td>
      <td>20086.43</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>1093297.37</td>
    </tr>
    <tr>
      <th>4</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALTEN</td>
      <td>667</td>
      <td>515879.78</td>
      <td>43516.71</td>
      <td>2404.19</td>
      <td>33749.10</td>
      <td>18472.64</td>
      <td>46720.61</td>
      <td>12909.41</td>
      <td>20762.75</td>
      <td>0.0</td>
      <td>0.00</td>
      <td>652523.86</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

We are not interested in the first line, so we drop it. Indeed, our data set now starts with the first municipality 'AA EN HUNZE'.

#+NAME: seven-mango-cat-angel
#+BEGIN_SRC ipython :session :results value
df_gemeente.drop(df_gemeente.index[[0]], inplace=True)
df_gemeente.head()
#+END_SRC

#+RESULTS: seven-mango-cat-angel
:RESULTS:
  sex             age   MUNICIPALITY  number_citizens  hospital_care  \
1   M   0 t/m  4 jaar    AA EN HUNZE              507      473370.77   
2   M   0 t/m  4 jaar        AALBURG              428      340442.37   
3   M   0 t/m  4 jaar       AALSMEER              876      932841.57   
4   M   0 t/m  4 jaar         AALTEN              667      515879.78   
5   M   0 t/m  4 jaar  ACHTKARSPELEN              810      766456.80   

   pharmaceuticals  mental_care  GP_capitation  GP_fee_for_service  GP_other  \
1         43305.49     14056.81       26239.56            12829.29  36034.65   
2         23395.86      5555.83       21673.15             9417.98  20159.19   
3         54597.52     34355.66       43971.27            22413.37  61629.32   
4         43516.71      2404.19       33749.10            18472.64  46720.61   
5         88084.16      6681.81       41477.79            19157.34  53633.01   

   dental care  physiotherapy  maternity_care  obstetrics  \
1      9311.14       15968.80             0.0         0.0   
2      7213.81        6135.05             0.0         0.0   
3     19042.00       20086.43             0.0         0.0   
4     12909.41       20762.75             0.0         0.0   
5     16695.10       23423.96             0.0         0.0   

   health_expenditure_under_deductible  
1                            576750.31  
2                            406856.55  
3                           1093297.37  
4                            652523.86  
5                            954494.16  
:END:



Now let's consider data types. 

#+NAME: west-ohio-sodium-sodium
#+BEGIN_SRC ipython :session :results output drawer
df_gemeente.dtypes
#+END_SRC

#+RESULTS: west-ohio-sodium-sodium
:RESULTS:
sex                                     object
age                                     object
MUNICIPALITY                            object
number_citizens                          int64
hospital_care                          float64
pharmaceuticals                        float64
mental_care                            float64
GP_capitation                          float64
GP_fee_for_service                     float64
GP_other                               float64
dental care                            float64
physiotherapy                          float64
maternity_care                         float64
obstetrics                             float64
health_expenditure_under_deductible    float64
dtype: object
:END:

The first three variables are seen as "object", that is, strings. This is fine for ~MUNICIPALITY~ but is not quite right for ~sex~ and ~age~ as these are categories. So let's relabel their types.

#+NAME: crazy-leopard-yankee-failed
#+BEGIN_SRC ipython :session
df_gemeente['sex'] = df_gemeente['sex'].astype('category')
df_gemeente['age'] = df_gemeente['age'].astype('category')
df_gemeente.info()
#+END_SRC

#+RESULTS: crazy-leopard-yankee-failed
:RESULTS:
<class 'pandas.core.frame.DataFrame'>
Int64Index: 14808 entries, 1 to 14808
Data columns (total 15 columns):
sex                                    14808 non-null category
age                                    14808 non-null category
MUNICIPALITY                           14808 non-null object
number_citizens                        14808 non-null int64
hospital_care                          14808 non-null float64
pharmaceuticals                        14808 non-null float64
mental_care                            14808 non-null float64
GP_capitation                          14808 non-null float64
GP_fee_for_service                     14808 non-null float64
GP_other                               14808 non-null float64
dental care                            14808 non-null float64
physiotherapy                          14808 non-null float64
maternity_care                         14808 non-null float64
obstetrics                             14808 non-null float64
health_expenditure_under_deductible    14808 non-null float64
dtypes: category(2), float64(11), int64(1), object(1)
memory usage: 1.6+ MB
:END:

We can select rows from a dataframe using ~loc~. Below, we consider the municipality Breda and people between 10 and 14 years old.

#+NAME: network-oxygen-one-pizza
#+BEGIN_SRC ipython :session
df_gemeente.loc[(df_gemeente.MUNICIPALITY == 'BREDA') & (df_gemeente['age'] == '10 t/m 14 jaar')]
#+END_SRC

#+RESULTS: network-oxygen-one-pizza
:RESULTS:
sex             age MUNICIPALITY  number_citizens  hospital_care  \
832    M  10 t/m 14 jaar        BREDA             5206     2215947.11   
8234   V  10 t/m 14 jaar        BREDA             4915     1425550.97   

      pharmaceuticals  mental_care  GP_capitation  GP_fee_for_service  \
832         381799.92    920439.00      301494.04             88705.2   
8234        255232.99    564944.21      284269.76             91482.6   

       GP_other  dental care  physiotherapy  maternity_care  obstetrics  \
832   142402.72    677836.15      187429.87             0.0         0.0   
8234  134486.26    620303.59      202916.68             0.0         0.0   

      health_expenditure_under_deductible  
832                            3756487.05  
8234                           2795294.25  
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sex</th>
      <th>age</th>
      <th>MUNICIPALITY</th>
      <th>number_citizens</th>
      <th>hospital_care</th>
      <th>pharmaceuticals</th>
      <th>mental_care</th>
      <th>GP_capitation</th>
      <th>GP_fee_for_service</th>
      <th>GP_other</th>
      <th>dental care</th>
      <th>physiotherapy</th>
      <th>maternity_care</th>
      <th>obstetrics</th>
      <th>health_expenditure_under_deductible</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>832</th>
      <td>M</td>
      <td>10 t/m 14 jaar</td>
      <td>BREDA</td>
      <td>5206</td>
      <td>2215947.11</td>
      <td>381799.92</td>
      <td>920439.00</td>
      <td>301494.04</td>
      <td>88705.2</td>
      <td>142402.72</td>
      <td>677836.15</td>
      <td>187429.87</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>3756487.05</td>
    </tr>
    <tr>
      <th>8234</th>
      <td>V</td>
      <td>10 t/m 14 jaar</td>
      <td>BREDA</td>
      <td>4915</td>
      <td>1425550.97</td>
      <td>255232.99</td>
      <td>564944.21</td>
      <td>284269.76</td>
      <td>91482.6</td>
      <td>134486.26</td>
      <td>620303.59</td>
      <td>202916.68</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>2795294.25</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:

If we are interested in one variable, e.g. ~number_citizens~, we can select this as well.

#+BEGIN_SRC ipython :session
df_gemeente.loc[(df_gemeente.MUNICIPALITY == 'BREDA') & (df_gemeente['age'] == '10 t/m 14 jaar')]['number_citizens']
#+END_SRC


---------------

*Exercise*

Calculate how many citizens live in Breda between the age of 10 and 14.

--------------

We can also give lists of row values that we are interested in:

#+NAME: ten-nineteen-kitten-oranges
#+BEGIN_SRC ipython :session
df_gemeente.loc[(df_gemeente.MUNICIPALITY.isin(['BREDA', 'TILBURG'])) & (df_gemeente['age'] == '10 t/m 14 jaar')]['number_citizens']
#+END_SRC

#+RESULTS: ten-nineteen-kitten-oranges
:RESULTS:
832     5206
1098    5817
8234    4915
8500    5651
Name: number_citizens, dtype: int64
:END:


----------------

*Exercise*

Calculate total health care expenditures under the deductible for people living in Amsterdam between the ages of 10 and 19 years old.

---------------


Now that we have the data ready, we are going to plot health care expenditures on the map of the Netherlands.

** geographical figures

We have map data that links the name of a municipality to coordinates
on the map. In this map data, the names of municipalities are
capitalized under standard Dutch capitalization like "Aa en Hunze". In
our Vektis data, the names of municipalities are written in
capitals. There are a number of ways to resolve this. To illustrate
the ~merge~ command, we use a file with two columns: 1. the names of
municipalities all capitalized and 2. normal capitalization. We drop
the rows where there is no value for municipality (if such rows
exist). We merge our data ~df_gemeente~ with the dataframe ~Gemeentes~. We use a "left-merge", so all rows in the first dataframe ~df_gemeente~ are kept.

#+NAME: ack-louisiana-california-november
#+BEGIN_SRC ipython :session :results output drawer
Gemeentes = pd.read_excel('Gemeentes.xlsx')
df_gemeente = df_gemeente.dropna(subset=['MUNICIPALITY'])
df_gem_merged = pd.merge(df_gemeente,Gemeentes,on=['MUNICIPALITY'],how='left')
df_gem_merged.head()
#+END_SRC

#+RESULTS: ack-louisiana-california-november
:RESULTS:
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sex</th>
      <th>age</th>
      <th>MUNICIPALITY</th>
      <th>number_citizens</th>
      <th>hospital_care</th>
      <th>pharmaceuticals</th>
      <th>mental_care</th>
      <th>GP_capitation</th>
      <th>GP_fee_for_service</th>
      <th>GP_other</th>
      <th>dental care</th>
      <th>physiotherapy</th>
      <th>maternity_care</th>
      <th>obstetrics</th>
      <th>health_expenditure_under_deductible</th>
      <th>Municipality</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AA EN HUNZE</td>
      <td>507</td>
      <td>473370.77</td>
      <td>43305.49</td>
      <td>14056.81</td>
      <td>26239.56</td>
      <td>12829.29</td>
      <td>36034.65</td>
      <td>9311.14</td>
      <td>15968.80</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>576750.31</td>
      <td>Aa en Hunze</td>
    </tr>
    <tr>
      <th>1</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALBURG</td>
      <td>428</td>
      <td>340442.37</td>
      <td>23395.86</td>
      <td>5555.83</td>
      <td>21673.15</td>
      <td>9417.98</td>
      <td>20159.19</td>
      <td>7213.81</td>
      <td>6135.05</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>406856.55</td>
      <td>Aalburg</td>
    </tr>
    <tr>
      <th>2</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALSMEER</td>
      <td>876</td>
      <td>932841.57</td>
      <td>54597.52</td>
      <td>34355.66</td>
      <td>43971.27</td>
      <td>22413.37</td>
      <td>61629.32</td>
      <td>19042.00</td>
      <td>20086.43</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1093297.37</td>
      <td>Aalsmeer</td>
    </tr>
    <tr>
      <th>3</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>AALTEN</td>
      <td>667</td>
      <td>515879.78</td>
      <td>43516.71</td>
      <td>2404.19</td>
      <td>33749.10</td>
      <td>18472.64</td>
      <td>46720.61</td>
      <td>12909.41</td>
      <td>20762.75</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>652523.86</td>
      <td>Aalten</td>
    </tr>
    <tr>
      <th>4</th>
      <td>M</td>
      <td>0 t/m  4 jaar</td>
      <td>ACHTKARSPELEN</td>
      <td>810</td>
      <td>766456.80</td>
      <td>88084.16</td>
      <td>6681.81</td>
      <td>41477.79</td>
      <td>19157.34</td>
      <td>53633.01</td>
      <td>16695.10</td>
      <td>23423.96</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>954494.16</td>
      <td>Achtkarspelen</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
  sex             age   MUNICIPALITY  number_citizens  hospital_care  \
0   M   0 t/m  4 jaar    AA EN HUNZE              507      473370.77
1   M   0 t/m  4 jaar        AALBURG              428      340442.37
2   M   0 t/m  4 jaar       AALSMEER              876      932841.57
3   M   0 t/m  4 jaar         AALTEN              667      515879.78
4   M   0 t/m  4 jaar  ACHTKARSPELEN              810      766456.80

   pharmaceuticals  mental_care  GP_capitation  GP_fee_for_service  GP_other  \
0         43305.49     14056.81       26239.56            12829.29  36034.65
1         23395.86      5555.83       21673.15             9417.98  20159.19
2         54597.52     34355.66       43971.27            22413.37  61629.32
3         43516.71      2404.19       33749.10            18472.64  46720.61
4         88084.16      6681.81       41477.79            19157.34  53633.01

   dental care  physiotherapy  maternity_care  obstetrics  \
0      9311.14       15968.80             0.0         0.0
1      7213.81        6135.05             0.0         0.0
2     19042.00       20086.43             0.0         0.0
3     12909.41       20762.75             0.0         0.0
4     16695.10       23423.96             0.0         0.0

   health_expenditure_under_deductible   Municipality
0                            576750.31    Aa en Hunze
1                            406856.55        Aalburg
2                           1093297.37       Aalsmeer
3                            652523.86         Aalten
4                            954494.16  Achtkarspelen
:END:

We are going to plot expenditure under the deductible per head for each municipality. We need a couple of steps in order to do this:
1. we add --for each municipality-- the expenditures under the deductible across age groups;
2. we add --for each municipality-- the number of people across age groups;
3. we divide --for each municipality-- the expenditures by the number of people.

With pandas this is straightforward to do using ~groupby~. We do the ~groupby~ on the municipality. For each municipality there are different age groups and we need to aggregate over these age groups. We specify the variables that we want to know at the municipality level. In this case ~health_expenditure_under_deductible~ and ~number_citizens~. Finally, we specify the function with which to aggregate. Here we use the 'built-in' function ~sum()~. Other functions we can use include ~mean~, ~min~, ~max~ etc. You can also specify your own function and apply this using ~agg()~.

Then hospital care per head can be defined as the total expenditure per municipality divided by the total number of citizens per municipality.

#+NAME: thirteen-november-angel-delaware
#+BEGIN_SRC ipython :session :results output drawer
results = df_gem_merged.groupby('Municipality')[['health_expenditure_under_deductible','number_citizens']].sum()
results['expenditure_per_head'] = results['health_expenditure_under_deductible']/results['number_citizens']
results.head()
#+END_SRC

#+RESULTS: thirteen-november-angel-delaware
:RESULTS:
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>health_expenditure_under_deductible</th>
      <th>number_citizens</th>
      <th>expenditure_per_head</th>
    </tr>
    <tr>
      <th>Municipality</th>
      <th></th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>'s-Gravenhage</th>
      <td>9.115807e+08</td>
      <td>509206</td>
      <td>1790.200148</td>
    </tr>
    <tr>
      <th>'s-Hertogenbosch</th>
      <td>2.697598e+08</td>
      <td>151934</td>
      <td>1775.506394</td>
    </tr>
    <tr>
      <th>Aa en Hunze</th>
      <td>4.696741e+07</td>
      <td>25415</td>
      <td>1848.019292</td>
    </tr>
    <tr>
      <th>Aalburg</th>
      <td>2.189368e+07</td>
      <td>12871</td>
      <td>1701.008568</td>
    </tr>
    <tr>
      <th>Aalsmeer</th>
      <td>4.864200e+07</td>
      <td>31365</td>
      <td>1550.837018</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
                  health_expenditure_under_deductible  number_citizens  \
Municipality
's-Gravenhage                            9.115807e+08           509206
's-Hertogenbosch                         2.697598e+08           151934
Aa en Hunze                              4.696741e+07            25415
Aalburg                                  2.189368e+07            12871
Aalsmeer                                 4.864200e+07            31365

                  expenditure_per_head
Municipality
's-Gravenhage              1790.200148
's-Hertogenbosch           1775.506394
Aa en Hunze                1848.019292
Aalburg                    1701.008568
Aalsmeer                   1550.837018
:END:

#+NAME: bravo-pip-march-batman
#+BEGIN_SRC ipython :session :results output drawer
# Create a dataframe
p_results = pd.DataFrame(dict(
    municipality = results.index,
    expenditure = results['expenditure_per_head']
    ))

p_results.head()
#+END_SRC

#+RESULTS: bravo-pip-march-batman
:RESULTS:
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>expenditure</th>
      <th>municipality</th>
    </tr>
    <tr>
      <th>Municipality</th>
      <th></th>
      <th></th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>'s-Gravenhage</th>
      <td>1790.200148</td>
      <td>'s-Gravenhage</td>
    </tr>
    <tr>
      <th>'s-Hertogenbosch</th>
      <td>1775.506394</td>
      <td>'s-Hertogenbosch</td>
    </tr>
    <tr>
      <th>Aa en Hunze</th>
      <td>1848.019292</td>
      <td>Aa en Hunze</td>
    </tr>
    <tr>
      <th>Aalburg</th>
      <td>1701.008568</td>
      <td>Aalburg</td>
    </tr>
    <tr>
      <th>Aalsmeer</th>
      <td>1550.837018</td>
      <td>Aalsmeer</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
                  expenditure      municipality
Municipality
's-Gravenhage     1790.200148     's-Gravenhage
's-Hertogenbosch  1775.506394  's-Hertogenbosch
Aa en Hunze       1848.019292       Aa en Hunze
Aalburg           1701.008568           Aalburg
Aalsmeer          1550.837018          Aalsmeer
:END:

#+NAME: muppet-lamp-william-minnesota
#+BEGIN_SRC ipython :session :results output drawer
from IPython.display import display, IFrame
import folium

geo_path = r'Gemeentegrenzen_2016_zonder_water_simplified_wgs84.geojson'


ref_map = folium.Map(
    location=[52.139177, 5.327108], # This will center the view on the world map where the Netherlands is located
    tiles='Mapbox Bright',          # This creates a base map and in this case its the Mapbox Bright basemap
    zoom_start=8)                   # This will zoom in on the center of view to get the Netherlands in full frame

ref_map.choropleth(
    # This is the path to the geojson file that contains all the municipality shapes and locations
    geo_path=geo_path,
    # We will use the p_results dataframe for the choropleth mapping
    data=p_results,
    # municipality will be used for the mapping key and expenditure for its value
    columns=['municipality', 'expenditure'],
    # Use GM_NAAM (short for municipality name) as keys for colormapping
    key_on='feature.properties.GM_NAAM',
    # We are going to use a color map from yellow to green
    fill_color='YlGn',
    # This gives municipality shapes some opacity so that we can still see the background
    fill_opacity=0.7,
    # This gives the lines around the municipality shapes some opacity so that they don't stand out too much
    line_opacity=0.2,
    # The legend
    legend_name='health care expenditure per head')

ref_map.save('health_expenditure.html')              # This will save the map in a HTML format

display(IFrame('health_expenditure.html', 800,800))  # This displays the map in an Iframe
#+END_SRC

#+RESULTS: muppet-lamp-william-minnesota
:RESULTS:
#+BEGIN_EXPORT HTML

        <iframe
            width="800"
            height="800"
            src="health_expenditure.html"
            frameborder="0"
            allowfullscreen
        ></iframe>

#+END_EXPORT
<IPython.lib.display.IFrame at 0x10ff2d160>
:END:

-----------------

*Exercise*

Plot number of citizens per municipality using color scheme 'OrRd'.

----------------



* Health care expenditure and age

The municipality data set above does not give the health care expenditure per age; only per age group (like 0-4 year olds). So we load another data set that does feature health care expenditure per age.

** read in the data

Again, we use data from [[http://www.vektis.nl/index.php/vektis-open-data][Vektis]]. We import the data, which is a 'csv' file with ";" as separator between columns. We also import some libraries.

Then we look at the columns (variables) in the data.


#+NAME: blossom-batman-uniform-princess
#+BEGIN_SRC ipython :session :results value
import numpy as np
import matplotlib as plt
df_postal_code = pd.read_csv('Vektis_Open_Databestand_Zorgverzekeringswet_2014_-_postcode3.csv', sep = ';')
df_postal_code.dtypes
#+END_SRC

#+RESULTS: blossom-batman-uniform-princess
:RESULTS:
GESLACHT                                   object
LEEFTIJDSKLASSE                            object
POSTCODE_3                                float64
AANTAL_BSN                                  int64
AANTAL_VERZEKERDEJAREN                    float64
KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG       float64
KOSTEN_FARMACIE                           float64
KOSTEN_TWEEDELIJNS_GGZ                    float64
KOSTEN_HUISARTS_INSCHRIJFTARIEF           float64
KOSTEN_HUISARTS_CONSULT                   float64
KOSTEN_HUISARTS_OVERIG                    float64
KOSTEN_HULPMIDDELEN                       float64
KOSTEN_MONDZORG                           float64
KOSTEN_PARAMEDISCHE_ZORG_FYSIOTHERAPIE    float64
KOSTEN_PARAMEDISCHE_ZORG_OVERIG           float64
KOSTEN_ZIEKENVERVOER_ZITTEND              float64
KOSTEN_ZIEKENVERVOER_LIGGEND              float64
KOSTEN_KRAAMZORG                          float64
KOSTEN_VERLOSKUNDIGE_ZORG                 float64
KOSTEN_GENERALISTISCHE_BASIS_GGZ          float64
KOSTEN_GRENSOVERSCHRIJDENDE_ZORG          float64
KOSTEN_EERSTELIJNS_ONDERSTEUNING          float64
KOSTEN_GERIATRISCHE_REVALIDATIEZORG       float64
KOSTEN_OVERIG                             float64
dtype: object
:END:



This looks very much like the data set above, so we want to do the same steps to get the data into the shape we want. In fact, if you go to the website [[http://www.vektis.nl/index.php/vektis-open-data][Vektis]] there are similar data sets for other years. Copy and paste the steps above and then apply these steps to the new data sets is asking for trouble:

+ you are likely to make mistakes with copy/paste
+ if you figure out that you want to change one of your commands, you have to change all the pasted versions as well

One solution in python is to define a function that does all these steps for you and apply this function to all the data sets that you want to work with.

#+NAME: kitten-kilo-one-july
#+BEGIN_SRC ipython :session :results output drawer
def get_data_into_shape(df):
    df['health_expenditure_under_deductible'] = df[cost_categories_under_deductible].sum(axis=1)
    df = df.rename_axis({
        'GESLACHT':'sex',
        'LEEFTIJDSKLASSE':'age',
        'GEMEENTENAAM':'MUNICIPALITY',
        'AANTAL_BSN':'number_citizens',
        'KOSTEN_MEDISCH_SPECIALISTISCHE_ZORG':'hospital_care',
        'KOSTEN_FARMACIE':'pharmaceuticals',
        'KOSTEN_TWEEDELIJNS_GGZ':'mental_care',
        'KOSTEN_HUISARTS_INSCHRIJFTARIEF':'GP_capitation',
        'KOSTEN_HUISARTS_CONSULT':'GP_fee_for_service',
        'KOSTEN_HUISARTS_OVERIG':'GP_other',
        'KOSTEN_MONDZORG':'dental care',
        'KOSTEN_PARAMEDISCHE_ZORG_FYSIOTHERAPIE':'physiotherapy',
        'KOSTEN_KRAAMZORG':'maternity_care',
        'KOSTEN_VERLOSKUNDIGE_ZORG':'obstetrics'
    }, axis='columns')
    df.drop(['AANTAL_VERZEKERDEJAREN',
             'KOSTEN_HULPMIDDELEN',
             'KOSTEN_PARAMEDISCHE_ZORG_OVERIG',
             'KOSTEN_ZIEKENVERVOER_ZITTEND',
             'KOSTEN_ZIEKENVERVOER_LIGGEND',
             'KOSTEN_GRENSOVERSCHRIJDENDE_ZORG',
             'KOSTEN_GERIATRISCHE_REVALIDATIEZORG',
             'KOSTEN_OVERIG',
             'KOSTEN_GENERALISTISCHE_BASIS_GGZ',
             'KOSTEN_EERSTELIJNS_ONDERSTEUNING'],inplace=True,axis=1)
    df.drop(df.index[[0]], inplace=True)
    df['sex'] = df['sex'].astype('category')
    df['age'] = df['age'].astype('category')
    return df

#+END_SRC



#+NAME: autumn-spaghetti-april-jupiter
#+BEGIN_SRC ipython :session :results output drawer
df_postal_code = get_data_into_shape(df_postal_code)
#+END_SRC

#+NAME: delaware-beryllium-north-three
#+BEGIN_SRC ipython :session :results output drawer
df_postal_code.head()
#+END_SRC

#+RESULTS: delaware-beryllium-north-three
:RESULTS:
sex age  POSTCODE_3  number_citizens  hospital_care  pharmaceuticals  \
1   M   0         0.0              366     1372209.26         31191.20   
2   M   0       101.0              590     1682944.17         25898.73   
3   M   0       102.0              295     1553933.53         29514.18   
4   M   0       103.0              288      827427.31         19263.79   
5   M   0       105.0              998     2965316.12         61610.42   

   mental_care  GP_capitation  GP_fee_for_service  GP_other  dental care  \
1       285.98        5548.60             5540.05  11525.93       681.02   
2     20774.91        9816.63            10130.12  20532.03         0.00   
3      7970.01        5317.49             6576.70  17426.30        21.29   
4       941.40        5014.97             5708.41  14168.90         0.00   
5      4780.48       16842.06            19676.01  43794.06       166.98   

   physiotherapy  maternity_care  obstetrics  \
1       12150.91             0.0         0.0   
2       17777.00             0.0         0.0   
3       20459.17             0.0         0.0   
4        9098.71             0.0         0.0   
5       42332.18             0.0         0.0   

   health_expenditure_under_deductible  
1                           1425823.15  
2                           1753560.87  
3                           1617184.58  
4                            865867.07  
5                           3118357.71  
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>sex</th>
      <th>age</th>
      <th>POSTCODE_3</th>
      <th>number_citizens</th>
      <th>hospital_care</th>
      <th>pharmaceuticals</th>
      <th>mental_care</th>
      <th>GP_capitation</th>
      <th>GP_fee_for_service</th>
      <th>GP_other</th>
      <th>dental care</th>
      <th>physiotherapy</th>
      <th>maternity_care</th>
      <th>obstetrics</th>
      <th>health_expenditure_under_deductible</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>1</th>
      <td>M</td>
      <td>0</td>
      <td>0.0</td>
      <td>366</td>
      <td>1372209.26</td>
      <td>31191.20</td>
      <td>285.98</td>
      <td>5548.60</td>
      <td>5540.05</td>
      <td>11525.93</td>
      <td>681.02</td>
      <td>12150.91</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1425823.15</td>
    </tr>
    <tr>
      <th>2</th>
      <td>M</td>
      <td>0</td>
      <td>101.0</td>
      <td>590</td>
      <td>1682944.17</td>
      <td>25898.73</td>
      <td>20774.91</td>
      <td>9816.63</td>
      <td>10130.12</td>
      <td>20532.03</td>
      <td>0.00</td>
      <td>17777.00</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1753560.87</td>
    </tr>
    <tr>
      <th>3</th>
      <td>M</td>
      <td>0</td>
      <td>102.0</td>
      <td>295</td>
      <td>1553933.53</td>
      <td>29514.18</td>
      <td>7970.01</td>
      <td>5317.49</td>
      <td>6576.70</td>
      <td>17426.30</td>
      <td>21.29</td>
      <td>20459.17</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>1617184.58</td>
    </tr>
    <tr>
      <th>4</th>
      <td>M</td>
      <td>0</td>
      <td>103.0</td>
      <td>288</td>
      <td>827427.31</td>
      <td>19263.79</td>
      <td>941.40</td>
      <td>5014.97</td>
      <td>5708.41</td>
      <td>14168.90</td>
      <td>0.00</td>
      <td>9098.71</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>865867.07</td>
    </tr>
    <tr>
      <th>5</th>
      <td>M</td>
      <td>0</td>
      <td>105.0</td>
      <td>998</td>
      <td>2965316.12</td>
      <td>61610.42</td>
      <td>4780.48</td>
      <td>16842.06</td>
      <td>19676.01</td>
      <td>43794.06</td>
      <td>166.98</td>
      <td>42332.18</td>
      <td>0.0</td>
      <td>0.0</td>
      <td>3118357.71</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:



The first three columns are 'sex', 'age' and 'postal code' (3 digit). These 3 variables combined determine a unique observation. We think of these observations as if they are from an individual (but an observation is an average, like the average over 18 year old males in postal code 102).


Note that the first postal code is '000' which python thinks of as '0.0'. The
[[http://www.vektis.nl/images/open_data/Bijsluiter_bij_de_Vektis_Open_Databestanden_Zorgverzekeringswet_2011_-_2014.pdf][data description]] explains that postal code '000' is used to aggregate people who
live in a postal code with so few people that the privacy of their data is no
longer guaranteed. As we want to think of ~sex~, ~age~ and ~postal code~ as an observation, we drop the first row (labelled as ~0~) of the dataframe.

#+NAME: one-queen-arizona-venus
#+BEGIN_SRC ipython :session :results value
df_postal_code.drop(df_postal_code.index[[0]], inplace=True)
df_postal_code.head()
#+END_SRC

#+RESULTS: one-queen-arizona-venus
:RESULTS:
  sex age  POSTCODE_3  number_citizens  hospital_care  pharmaceuticals  \
2   M   0       101.0              590     1682944.17         25898.73   
3   M   0       102.0              295     1553933.53         29514.18   
4   M   0       103.0              288      827427.31         19263.79   
5   M   0       105.0              998     2965316.12         61610.42   
6   M   0       106.0             1056     3716382.22         87140.60   

   mental_care  GP_capitation  GP_fee_for_service  GP_other  dental care  \
2     20774.91        9816.63            10130.12  20532.03         0.00   
3      7970.01        5317.49             6576.70  17426.30        21.29   
4       941.40        5014.97             5708.41  14168.90         0.00   
5      4780.48       16842.06            19676.01  43794.06       166.98   
6     25006.18       19517.84            24045.35  65572.64       114.05   

   physiotherapy  maternity_care  obstetrics  \
2       17777.00             0.0         0.0   
3       20459.17             0.0         0.0   
4        9098.71             0.0         0.0   
5       42332.18             0.0         0.0   
6       28299.76             0.0         0.0   

   health_expenditure_under_deductible  
2                           1753560.87  
3                           1617184.58  
4                            865867.07  
5                           3118357.71  
6                           3885368.16  
:END:

The end of the dataframe is given by the following.

#+NAME: finch-oven-thirteen-nine
#+begin_src ipython :session :results value
df_postal_code.tail(10)
#+end_src

#+RESULTS: finch-oven-thirteen-nine
:RESULTS:
       sex  age  POSTCODE_3  number_citizens  hospital_care  pharmaceuticals  \
136463   V  90+       988.0               10       19698.83          4011.31   
136464   V  90+       990.0              151      257046.54         99187.66   
136465   V  90+       991.0               51       95990.43         52682.34   
136466   V  90+       993.0              170      278000.11        124809.41   
136467   V  90+       994.0               38       28454.41         36590.90   
136468   V  90+       995.0               88      200183.72         64315.53   
136469   V  90+       996.0               44       46723.13         39419.64   
136470   V  90+       997.0               38       98954.45         34308.68   
136471   V  90+       998.0              116      168802.54        116907.93   
136472   V  90+       999.0               38      109842.07         40607.06   

        mental_care  GP_capitation  GP_fee_for_service  GP_other  dental care  \
136463         0.00         894.25              567.45   1283.11         0.00   
136464     37614.24       11880.75            20144.21  24522.70      1619.74   
136465      1102.77        4854.50            14575.32  15550.40       801.65   
136466     12652.77       12646.44            13305.75  19040.63      2495.54   
136467      2251.30        3652.03             5742.81  16966.62       143.16   
136468      3691.37        6438.60            11593.30  15929.91      2729.32   
136469      2833.17        4011.35             5459.40  15185.71       979.06   
136470      4480.09        3347.05             5395.18   7061.51       897.98   
136471     13830.16       10424.40            13527.80  28548.80      1577.91   
136472      3273.62        3704.75             4197.46   6763.69        60.97   

        physiotherapy  maternity_care  obstetrics  \
136463            0.0             0.0         0.0   
136464        12000.6             0.0         0.0   
136465          462.0             0.0         0.0   
136466         1675.0             0.0         0.0   
136467         1409.2             0.0         0.0   
136468         4352.1             0.0         0.0   
136469         6537.2             0.0         0.0   
136470         9201.0             0.0         0.0   
136471         1875.6             0.0         0.0   
136472          290.0             0.0         0.0   

        health_expenditure_under_deductible  
136463                             33079.01  
136464                            790837.02  
136465                            207319.25  
136466                            535215.22  
136467                            106569.94  
136468                            378170.95  
136469                            156304.71  
136470                            193232.92  
136471                            455608.75  
136472                            198874.20  
:END:

As we saw above, the datatype of ~age~ was ~object~, although we would expect ~integer~. Now we see that there is this category ~90+~, which is not an integer. We will drop this age category as it is quite special. Before we do this, let's count how many people we have in our dataset.

#+NAME: comet-sodium-sink-kansas
#+BEGIN_SRC ipython :session :results output drawer
df_postal_code['number_citizens'].sum()
#+END_SRC

#+RESULTS: comet-sodium-sink-kansas
:RESULTS:
16885677
:END:

That is, almost 17 million people, which is about right.

Let's drop the '90+' category and turn ~age~ into an integer variable.

#+NAME: nevada-nevada-alpha-lithium
#+BEGIN_SRC ipython :session :results value
df_postal_code = df_postal_code[(df_postal_code['age'] != '90+')]
df_postal_code['age'] = df_postal_code['age'].astype(int)
#+END_SRC

#+RESULTS: nevada-nevada-alpha-lithium
:RESULTS:
:END:

Let's summarize the variables that are numeric (integer or float). For each of these variables we have 135,063 observations (that is, combinations of ~sex~, ~age~ and ~postal code~). The mean for number of citizens is 124. With $135,063*124$ we are close to 17 million again.

#+NAME: mexico-minnesota-carbon-single
#+BEGIN_SRC ipython :session :results value
df_postal_code.describe()
#+END_SRC

#+RESULTS: mexico-minnesota-carbon-single
:RESULTS:
                 age     POSTCODE_3  number_citizens  hospital_care  \
count  135063.000000  135063.000000    135063.000000   1.350630e+05   
mean       43.753959     541.250002       123.950327   1.534887e+05   
std        25.535582     258.016742       129.491359   1.965840e+05   
min         0.000000       0.000000        10.000000  -2.300980e+04   
25%        22.000000     318.000000        40.000000   3.055294e+04   
50%        44.000000     539.000000        82.000000   8.262627e+04   
75%        66.000000     763.000000       161.000000   2.006986e+05   
max        89.000000     999.000000      2228.000000   5.263426e+06   

       pharmaceuticals    mental_care  GP_capitation  GP_fee_for_service  \
count     1.350630e+05  135063.000000  135063.000000       135063.000000   
mean      3.146225e+04   23296.150212    7693.165768         4528.021995   
std       4.483099e+04   45078.454602    7676.781993         5060.276133   
min      -2.857890e+03  -29164.050000       0.000000            0.000000   
25%       5.034130e+03     299.260000    2585.970000         1351.340000   
50%       1.547225e+04    5702.020000    5244.990000         2900.080000   
75%       4.037718e+04   24546.195000   10140.510000         5899.600000   
max       1.546412e+06  885045.050000  155453.330000       194903.830000   

            GP_other    dental care  physiotherapy  maternity_care  \
count  135063.000000  135063.000000  135063.000000   135063.000000   
mean     5938.297319    5438.213219    3287.127334     2201.230080   
std      6329.471736   10190.600213    4659.495994    10426.252898   
min         0.000000    -458.190000    -106.800000    -1898.420000   
25%      1934.255000     150.075000     143.745000        0.000000   
50%      4002.870000    1746.990000    1617.300000        0.000000   
75%      7691.255000    6293.135000    4463.975000        0.000000   
max    276119.620000  254585.130000  106169.130000   399960.460000   

          obstetrics  health_expenditure_under_deductible  
count  135063.000000                         1.350630e+05  
mean     1612.545851                         2.192913e+05  
std      7853.598487                         2.719250e+05  
min         0.000000                         0.000000e+00  
25%         0.000000                         4.791477e+04  
50%         0.000000                         1.234374e+05  
75%         0.000000                         2.872767e+05  
max    321751.460000                         9.012553e+06  
:END:

#+NAME: bakerloo-lemon-edward-mike
#+BEGIN_SRC ipython :session
df_postal_code.info()
#+END_SRC

#+RESULTS: bakerloo-lemon-edward-mike
:RESULTS:
<class 'pandas.core.frame.DataFrame'>
Int64Index: 135063 entries, 2 to 135741
Data columns (total 15 columns):
sex                                    135063 non-null category
age                                    135063 non-null int64
POSTCODE_3                             135063 non-null float64
number_citizens                        135063 non-null int64
hospital_care                          135063 non-null float64
pharmaceuticals                        135063 non-null float64
mental_care                            135063 non-null float64
GP_capitation                          135063 non-null float64
GP_fee_for_service                     135063 non-null float64
GP_other                               135063 non-null float64
dental care                            135063 non-null float64
physiotherapy                          135063 non-null float64
maternity_care                         135063 non-null float64
obstetrics                             135063 non-null float64
health_expenditure_under_deductible    135063 non-null float64
dtypes: category(1), float64(12), int64(2)
memory usage: 15.6 MB
:END:



Now let's define the costs per head. For each observation, we divide the total health care costs (under the deductible) for a combination of ~sex~, ~age~ and ~postal code~ by the number of people in this combination of ~sex~, ~age~ and ~postal code~. This gives the health costs per head.

#+NAME: may-three-carpet-texas
#+BEGIN_SRC ipython :session :results output drawer
df_postal_code['health_costs_per_head'] = df_postal_code['health_expenditure_under_deductible']/df_postal_code['number_citizens']
#+END_SRC

So for, say, 18 year old males, we have a distribution of costs per head over the different ~postal codes~. For each combination of age and sex, we can look at the average expenditure. With ~pandas~ this is easy to do. We use ~groupby~, specify the dimensions over which we want to group, the variable we are interested in and give the function to aggregate (mean, in this case).

#+NAME: edward-minnesota-social-equal
#+BEGIN_SRC ipython :session :results output drawer
costs_per_sex_age = df_postal_code.groupby(['sex','age'])['health_costs_per_head'].mean()
#+END_SRC


** matplotlib

Then we can plot this distribution of health care expenditure per head with age for males and females.

#+NAME: london-nuts-mirror-carbon
#+BEGIN_SRC ipython :session
import matplotlib.pyplot as plt
plt.style.use('seaborn')
fig = plt.figure()
ax = costs_per_sex_age['M'].plot()
ax = costs_per_sex_age['V'].plot()
ax.set_xlabel('age')
ax.set_ylabel('costs per head')
ax.set_title('average costs per age and sex')
ax.legend(['male','female'])
fig.savefig("males.png")
#+END_SRC


[[./males.png]]


-----------------

*Exercise*

Finish the following code block to show how total obstetrics vary with 'age' and 'sex' (what would you guess...). 

#+NAME: winter-papa-single-delaware
#+BEGIN_SRC ipython :session
obstetrics_per_sex_age = df_postal_code.groupby(['sex','age'])['obstetrics'].sum()

....

fig.savefig("obstetrics.png")
#+END_SRC


---------------

We can plot a histogram of the distribution of hospital care expenditure across postal code areas.

#+NAME: cola-sink-leopard-nebraska
#+BEGIN_SRC ipython :session
hospital_care_expenditure = df_postal_code.groupby(['age','POSTCODE_3'])['hospital_care'].sum()

plt.clf()
plt.hist(hospital_care_expenditure[7],normed = True, bins = 100)
plt.show()
#+END_SRC


------------

*Exercise*

In which fraction of postal code areas does hospital expenditures on 50 year olds exceed 50000 euro? Finish the following code block to find out.


#+NAME: juliet-sweet-item-vermont
#+BEGIN_SRC ipython :session
sum()/len()
#+END_SRC

------------------


Suppose you are interested in the effect of the deductible on health care expenditure. Why would the following graph help for this?


#+NAME: grey-october-xray-red
#+BEGIN_SRC ipython :session :results output drawer
plt.style.use('seaborn')
plt.clf()
age_range = [14,15,16,17,19,20,21,22]

plt.plot(age_range,costs_per_sex_age['M'][age_range], marker='.', label = 'male')
plt.plot(age_range,costs_per_sex_age['V'][age_range], marker='.', label = 'female')
plt.xlabel('age')
plt.ylabel('health care costs')
plt.legend()
fig.savefig('fig14to22.png')

#+END_SRC

[[./fig14to22.png]]


** plotly

Instead of ~matplotlib~ to plot, we can also use ~plotly~. With ~plotly~ you can make interactive graphs. The graph runs on plotly's servers and can for instance be included in presentations.

We are going to plot the cumulative distribution functions of health care expenditure for different age groups. We first define the cumulative distribution function ~ecdf~.

#+NAME: whiskey-south-stream-speaker
#+BEGIN_SRC ipython :session :results output drawer
def ecdf(data):
    x = np.sort(data)
    y = np.arange(1.0, len(x)+1.0) / len(x)
    return x, y
#+END_SRC

Then we define the $x$ and $y$ coordinates of the functions we want to plot: the ~ecdf~ of health care expenditures for ages 16, 17, 19 and 20.

#+NAME: seventeen-four-ceiling-hotel
#+BEGIN_SRC ipython :session :results output drawer
x_16, y_16 = ecdf(df_postal_code.health_costs_per_head[(df_postal_code['age'] == 16)])
x_17, y_17 = ecdf(df_postal_code.health_costs_per_head[(df_postal_code['age'] == 17)])
x_19, y_19 = ecdf(df_postal_code.health_costs_per_head[(df_postal_code['age'] == 19)])
x_20, y_20 = ecdf(df_postal_code.health_costs_per_head[(df_postal_code['age'] == 20)])


#+END_SRC


We import plotly.

#+NAME: colorado-utah-ink-virginia
#+BEGIN_SRC ipython :session :results output drawer
import plotly.plotly as py
from plotly.graph_objs import *
import plotly.tools as tls
#+END_SRC

Finally, we define the graph itself. We specify the "Scatter's" and the layout. The web address can be used if you want to include this graph in a presentation.

#+NAME: artist-mockingbird-florida-hot
#+BEGIN_SRC ipython :session :results output drawer
age16 = Scatter(
    x=x_16,
    y=y_16,
    mode='markers+lines',
    name = 'age 16'
)
age17 = Scatter(
    x=x_17,
    y=y_17,
    mode='markers+lines',
    name = 'age 17'
)
age19 = Scatter(
    x=x_19,
    y=y_19,
    mode='markers+lines',
    name = 'age 19'
)
age20 = Scatter(
    x=x_20,
    y=y_20,
    mode='markers+lines',
    name = 'age 20'
)

layout = Layout(
    title='Health care expend. distribution functions',
    xaxis=XAxis(
        range=[0,3000],
        title='expenditure per head',
        titlefont=Font(
            family='Courier New, monospace',
            size=18,
            color='#7f7f7f'
        )
    ),
    yaxis=YAxis(
        title='cum. distribution function',
        titlefont=Font(
            family='Courier New, monospace',
            size=18,
            color='#7f7f7f'
        )
    )
)

data = Data([age16,age17,age19,age20])
fig = Figure(data=data, layout=layout)
py.plot(fig, filename='Distribution functions of health care expenditure per head')
tls.embed("https://plot.ly/~janboone/301")
#+END_SRC

#+RESULTS: artist-mockingbird-florida-hot
:RESULTS:
#+BEGIN_EXPORT HTML
<iframe id="igraph" scrolling="no" style="border:none;" seamless="seamless" src="https://plot.ly/~janboone/301.embed" height="525" width="100%"></iframe>
#+END_EXPORT
<plotly.tools.PlotlyDisplay object>
:END:
